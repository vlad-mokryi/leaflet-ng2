import { AfterContentInit, EventEmitter, OnDestroy } from '@angular/core';
import { DivIcon, DragEndEvent, Icon, LatLng, LatLngLiteral, LatLngTuple, LeafletEvent, Marker, PopupEvent, TooltipEvent } from 'leaflet';
import { LayerGroupProvider } from './layer-group.provider';
import { LayerProvider } from './layer.provider';
import { MarkerProvider } from './marker.provider';
export declare class MarkerDirective extends Marker implements AfterContentInit, OnDestroy {
    positionChange: EventEmitter<LatLng>;
    latChange: EventEmitter<number>;
    lngChange: EventEmitter<number>;
    opacityChange: EventEmitter<number>;
    displayChange: EventEmitter<boolean>;
    zindexChange: EventEmitter<number>;
    draggableChange: EventEmitter<boolean>;
    iconChange: EventEmitter<Icon | DivIcon>;
    tooltipOpenedChange: EventEmitter<boolean>;
    popupOpenedChange: EventEmitter<boolean>;
    dragendEvent: EventEmitter<DragEndEvent>;
    dragstartEvent: EventEmitter<LeafletEvent>;
    movestartEvent: EventEmitter<LeafletEvent>;
    dragEvent: EventEmitter<LeafletEvent>;
    moveendEvent: EventEmitter<LeafletEvent>;
    addEvent: EventEmitter<LeafletEvent>;
    removeEvent: EventEmitter<LeafletEvent>;
    popupopenEvent: EventEmitter<PopupEvent>;
    popupcloseEvent: EventEmitter<PopupEvent>;
    tooltipopenEvent: EventEmitter<TooltipEvent>;
    tooltipcloseEvent: EventEmitter<TooltipEvent>;
    clickEvent: EventEmitter<MouseEvent>;
    dbclickEvent: EventEmitter<MouseEvent>;
    mousedownEvent: EventEmitter<MouseEvent>;
    mouseoverEvent: EventEmitter<MouseEvent>;
    mouseoutEvent: EventEmitter<MouseEvent>;
    contextmenuEvent: EventEmitter<MouseEvent>;
    private initialized;
    constructor(layerGroupProvider: LayerGroupProvider, layerProvider: LayerProvider, markerProvider: MarkerProvider);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    display: boolean;
    setLatLng(val: LatLng | LatLngLiteral | LatLngTuple): this;
    position: LatLng;
    lat: number;
    lng: number;
    setOpacity(val: number): this;
    opacity: number;
    setIcon(val: Icon | DivIcon): this;
    icon: Icon | DivIcon;
    draggable: boolean;
    title: string;
    alt: string;
}
